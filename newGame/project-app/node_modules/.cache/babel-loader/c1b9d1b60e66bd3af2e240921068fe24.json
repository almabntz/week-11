{"ast":null,"code":"var _jsxFileName = \"/Users/tpl522_6/Documents/week-11/newGame/project-app/src/Board.js\",\n    _s = $RefreshSig$();\n\n// Importing the CSS for the board\nimport \"./css/board.css\"; // Importing the useState hook, useEffect hook and useRef hook\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = _ref => {\n  _s();\n\n  let {\n    reset,\n    setReset,\n    winner,\n    setWinner\n  } = _ref;\n  // Creating a turn state, which indicates the current turn\n  const [turn, setTurn] = useState(0); // Creating a data state, which contains the\n  // current picture of the board\n\n  const [data, setData] = useState(['', '', '', '', '', '', '', '', '']); // Creating a reference for the board\n\n  const boardRef = useRef(null); // Function to draw on the board\n\n  const draw = (event, index) => {\n    // Draws only if the position is not taken\n    // and winner is not decided yet\n    if (data[index - 1] === '' && winner === '') {\n      // Draws X if it's player 1's turn else draws O\n      const current = turn === 0 ? \"X\" : \"O\"; // Updating the data state\n\n      data[index - 1] = current; //Drawing on the board\n\n      event.target.innerText = current; // Switching the turn\n\n      setTurn(turn === 0 ? 1 : 0);\n    }\n  }; // UseEffect hook used to reset the board whenever\n  // a winner is decided\n\n\n  useEffect(() => {\n    // Clearing the data state\n    setData(['', '', '', '', '', '', '', '', '']); // Getting all the children(cells) of the board\n\n    const cells = boardRef.current.children; // Clearing out the board\n\n    for (let i = 0; i < 9; i++) {\n      cells[i].innerText = '';\n    } // Resetting the turn to player 0\n\n\n    setTurn(0); // Resetting the winner\n\n    setWinner('');\n    setReset(false);\n  }, [reset, setReset, setWinner]); // useEffect hook used to check for a winner\n\n  useEffect(() => {\n    // Checks for the win condition in rows\n    const checkRow = () => {\n      let ans = false;\n\n      for (let i = 0; i < 9; i += 3) {\n        ans |= data[i] === data[i + 1] && data[i] === data[i + 2] && data[i] !== '';\n      }\n\n      return ans;\n    }; // Checks for the win condition in cols\n\n\n    const checkCol = () => {\n      let ans = false;\n\n      for (let i = 0; i < 3; i++) {\n        ans |= data[i] === data[i + 3] && data[i] === data[i + 6] && data[i] !== '';\n      }\n\n      return ans;\n    }; // Checks for the win condition in diagonals\n\n\n    const checkDiagonal = () => {\n      return data[0] === data[4] && data[0] === data[8] && data[0] !== '' || data[2] === data[4] && data[2] === data[6] && data[2] !== '';\n    }; // Checks if at all a win condition is present\n\n\n    const checkWin = () => {\n      return checkRow() || checkCol() || checkDiagonal();\n    }; // Checks for a tie\n\n\n    const checkTie = () => {\n      let count = 0;\n      data.forEach(cell => {\n        if (cell !== '') {\n          count++;\n        }\n      });\n      return count === 9;\n    }; // Setting the winner in case of a win\n\n\n    if (checkWin()) {\n      setWinner(turn === 0 ? \"Player 2 Wins!\" : \"Player 1 Wins!\");\n    } else if (checkTie()) {\n      // Setting the winner to tie in case of a tie\n      setWinner(\"It's a Tie!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-1\",\n      onClick: e => draw(e, 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-2\",\n      onClick: e => draw(e, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-3\",\n      onClick: e => draw(e, 3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-4\",\n      onClick: e => draw(e, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-5\",\n      onClick: e => draw(e, 5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-6\",\n      onClick: e => draw(e, 6)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-7\",\n      onClick: e => draw(e, 7)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-8\",\n      onClick: e => draw(e, 8)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-9\",\n      onClick: e => draw(e, 9)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Board, \"KBj0XRy5dJDHwQLA6O5dr8n5K8o=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","Board","reset","setReset","winner","setWinner","turn","setTurn","data","setData","boardRef","draw","event","index","current","target","innerText","cells","children","i","checkRow","ans","checkCol","checkDiagonal","checkWin","checkTie","count","forEach","cell","e"],"sources":["/Users/tpl522_6/Documents/week-11/newGame/project-app/src/Board.js"],"sourcesContent":["// Importing the CSS for the board\nimport \"./css/board.css\";\n\n// Importing the useState hook, useEffect hook and useRef hook\nimport { useState, useEffect, useRef } from \"react\";\n\nconst Board = ({ reset, setReset, winner, setWinner }) => {\n\n\t// Creating a turn state, which indicates the current turn\n\tconst [turn, setTurn] = useState(0);\n\n\t// Creating a data state, which contains the\n\t// current picture of the board\n\tconst [data, setData] = useState(['', '', '', '', '',\n\t\t'', '', '', ''])\n\n\t// Creating a reference for the board\n\tconst boardRef = useRef(null);\n\n\t// Function to draw on the board\n\tconst draw = (event, index) => {\n\t\t// Draws only if the position is not taken\n\t\t// and winner is not decided yet\n\t\tif (data[index - 1] === '' && winner === '') {\n\n\t\t\t// Draws X if it's player 1's turn else draws O\n\t\t\tconst current = turn === 0 ? \"X\" : \"O\"\n\n\t\t\t// Updating the data state\n\t\t\tdata[index - 1] = current;\n\n\t\t\t//Drawing on the board\n\t\t\tevent.target.innerText = current;\n\n\t\t\t// Switching the turn\n\t\t\tsetTurn(turn === 0 ? 1 : 0)\n\t\t}\n\t}\n\n\t// UseEffect hook used to reset the board whenever\n\t// a winner is decided\n\tuseEffect(() => {\n\n\t\t// Clearing the data state\n\t\tsetData(['', '', '', '', '', '', '', '', '']);\n\n\t\t// Getting all the children(cells) of the board\n\t\tconst cells = boardRef.current.children\n\n\t\t// Clearing out the board\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tcells[i].innerText = '';\n\t\t}\n\n\t\t// Resetting the turn to player 0\n\t\tsetTurn(0);\n\n\t\t// Resetting the winner\n\t\tsetWinner('');\n\t\tsetReset(false);\n\t}, [reset, setReset, setWinner])\n\n\n\t// useEffect hook used to check for a winner\n\tuseEffect(() => {\n\n\t\t// Checks for the win condition in rows\n\t\tconst checkRow = () => {\n\t\t\tlet ans = false;\n\t\t\tfor (let i = 0; i < 9; i += 3) {\n\t\t\t\tans |= (data[i] === data[i + 1] &&\n\t\t\t\tdata[i] === data[i + 2] &&\n\t\t\t\tdata[i] !== '')\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\n\t\t// Checks for the win condition in cols\n\t\tconst checkCol = () => {\n\t\t\tlet ans = false;\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tans |= (data[i] === data[i + 3] &&\n\t\t\t\tdata[i] === data[i + 6] &&\n\t\t\t\tdata[i] !== '')\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\n\t\t// Checks for the win condition in diagonals\n\t\tconst checkDiagonal = () => {\n\t\t\treturn ((data[0] === data[4] &&\n\t\t\tdata[0] === data[8] && data[0] !== '') ||\n\t\t\t(data[2] === data[4] && data[2] === data[6] &&\n\t\t\tdata[2] !== ''));\n\t\t}\n\n\t\t// Checks if at all a win condition is present\n\t\tconst checkWin = () => {\n\t\t\treturn (checkRow() || checkCol() || checkDiagonal());\n\t\t}\n\n\t\t// Checks for a tie\n\t\tconst checkTie = () => {\n\t\t\tlet count = 0;\n\t\t\tdata.forEach((cell) => {\n\t\t\t\tif (cell !== '') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn count === 9;\n\t\t}\n\n\t\t// Setting the winner in case of a win\n\t\tif (checkWin()) {\n\t\t\tsetWinner(turn === 0 ? \"Player 2 Wins!\" :\n\t\t\t\"Player 1 Wins!\");\n\t\t} else if (checkTie()) {\n\n\t\t\t// Setting the winner to tie in case of a tie\n\t\t\tsetWinner(\"It's a Tie!\");\n\t\t}\n\n\t})\n\n\treturn (\n\t\t<div ref={boardRef} className=\"board\">\n\t\t\t<div className=\"input input-1\"\n\t\t\t\tonClick={(e) => draw(e, 1)}></div>\n\t\t\t<div className=\"input input-2\"\n\t\t\t\tonClick={(e) => draw(e, 2)}></div>\n\t\t\t<div className=\"input input-3\"\n\t\t\t\tonClick={(e) => draw(e, 3)}></div>\n\t\t\t<div className=\"input input-4\"\n\t\t\t\tonClick={(e) => draw(e, 4)}></div>\n\t\t\t<div className=\"input input-5\"\n\t\t\t\tonClick={(e) => draw(e, 5)}></div>\n\t\t\t<div className=\"input input-6\"\n\t\t\t\tonClick={(e) => draw(e, 6)}></div>\n\t\t\t<div className=\"input input-7\"\n\t\t\t\tonClick={(e) => draw(e, 7)}></div>\n\t\t\t<div className=\"input input-8\"\n\t\t\t\tonClick={(e) => draw(e, 8)}></div>\n\t\t\t<div className=\"input input-9\"\n\t\t\t\tonClick={(e) => draw(e, 9)}></div>\n\t\t</div>\n\t)\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}